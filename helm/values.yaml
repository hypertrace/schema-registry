# Name of service
nameOverride: ""
fullnameOverride: ""

# Number of pods to deploy
replicaCount: 1

# Docker container to deploy
image:
  repository: "hypertrace/schema-registry"
  pullPolicy: "IfNotPresent"
  tag: ""

imagePullSecrets: []

configurationOverrides:
  kafkastore.timeout.ms: 2000

customEnv: {}
schemaRegistryOpts: {}
overrideGroupId: ""
kafka:
  protocol: "PLAINTEXT"
  bootstrapServers: ""

# Schema registry JVM Heap Option
heapOptions: "-Xms128M -Xmx200M"

# Avro Compatibility  Level
avroCompatibilityLevel: "full"

# Resources requested by pod
resources:
  requests:
    cpu: "0.25"
    memory: "256Mi"

# livenes probe on http port
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10

# readiness probe on http port
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10

# upgrade strategy
updateStrategy:
  type: RollingUpdate

podManagementPolicy: OrderedReady

podAnnotations: {}

podLabels: {}

commonPodLabels: {}

commonPodAnnotations: {}

terminationGracePeriodSeconds: 30

nodeSelector: {}

tolerations: []

affinity: {}

hostNetwork: false

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE

serviceAccount:
  create: false
  name: ""

service:
  port: 8081
  ## Service type can be set to ClusterIP, NodePort or LoadBalancer.
  type: ClusterIP
  ## Service annotations
  annotations: {}
  loadBalancerSourceRanges: []

# Ingress Resource
ingress:
  enabled: false
  annotations: {}
  ## Ingress hostnames
  ## Must be provided if Ingress is enabled
  hosts:
    - paths:
        - path: "/schema-registry"

## Monitoring
## Schema Registry JMX Settings
## ref: https://docs.confluent.io/current/schema-registry/docs/monitoring.html
jmx:
  enabled: false
  port: 5559

## Prometheus Exporter Configuration
## ref: https://prometheus.io/docs/instrumenting/exporters/
prometheus:
  ## JMX Exporter Configuration
  ## ref: https://github.com/prometheus/jmx_exporter
  jmx:
    enabled: false
    image:
      repository: hypertrace/prometheus-jmx-exporter
      tag: 0.1.8
      pullPolicy: IfNotPresent
    port: 5560
    resources:
      limits:
        cpu: "0.5"
        memory: "512Mi"
      requests:
        cpu: "0.1"
        memory: "256Mi"

servicemonitor:
  enabled: false
  interval: 15s
  secure: false
  tlsConfig: {}

compatibilityChanger:
  enabled: true
  image:
    repository: hypertrace/compatibility-changer
    tagOverride: ""
  config:
    name: "compatibility-changer-configmap"
    defaultSchemaType: "NONE"
  cronjob:
    podLabels: {}
    podAnnotations: {}
    schedule: "0 * * * *" # Hourly.
    suspend: false
    successfulJobsHistoryLimit: 3
    resources: {}
    concurrencyPolicy: Forbid
    restartPolicy: Never
    affinity: {}
    nodeSelector: {}
    securityContext: {}
    tolerations: []
    activeDeadlineSeconds: 2700
    startingDeadlineSeconds: 300


