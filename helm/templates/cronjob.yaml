{{- if .Values.backup.enabled }}
{{- if semverCompare ">=1.21-0" .Capabilities.KubeVersion.Version }}
apiVersion: batch/v1
{{- else }}
apiVersion: batch/v1beta1
{{- end }}
kind: CronJob
metadata:
  name: {{ include "schema-registry.fullname" . }}-backup
  labels:
    {{- include "schema-registry.labels.standard" . | nindent 4 }}
spec:
  schedule: {{ .Values.backup.schedule |  quote }}
  {{- if .Values.backup.startingDeadlineSeconds }}
  startingDeadlineSeconds: {{ int .Values.backup.startingDeadlineSeconds }}
  {{- end }}
  {{- if .Values.backup.concurrencyPolicy }}
  concurrencyPolicy: {{ .Values.backup.concurrencyPolicy }}
  {{- end }}
  {{- if not .Values.backup.enabled }}
  suspend: true
  {{- end }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: {{ include "schema-registry.name" . }}-backup
            {{- with .Values.backup.podLabels }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.backup.podAnnotations }}
          annotations:
            {{- toYaml .Values.backup.podAnnotations | nindent 12 }}
          {{- end }}
        spec:
          restartPolicy: OnFailure
          containers:
            - name: {{ include "schema-registry.fullname" . }}-backup
              image: {{ .Values.backup.image.repository }}:{{ .Values.backup.image.tag }}
              imagePullPolicy: {{ .Values.backup.image.pullPolicy }}
              command:
                - "/bin/bash"
                - "-cx"
                - |
                  cd /backup
                  export HOME=/backup
                  timestamp=$(date +%Y-%m-%d-%H-%M-%S)
                  month=${timestamp:0:7}
                  unset JMX_PORT KAFKA_OPTS KAFKA_HEAP_OPTS KAFKA_LOG4J_OPTS
                  /opt/kafka/bin/kafka-console-consumer.sh --bootstrap-server $KAFKA_BOOTSTRAP_SERVERS --topic $KAFKA_TOPIC --from-beginning --property print.key=true --timeout-ms 60000 1> schemas-${timestamp}.log || exit 2
                  tar cvfz schemas-${timestamp}.tar.gz schemas-$timestamp.log || exit 2
                  {{- if .Values.backup.gcloud }}
                  BACKUP_LOCATION=gs://$BUCKET/schema-registry/$CLUSTER_NAME/$month
                  gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS || exit 2
                  gsutil cp schemas-${timestamp}.tar.gz $BACKUP_LOCATION/schemas-${timestamp}.tar.gz || exit 2
                  {{- end }}
                  {{- if .Values.backup.aws }}
                  BACKUP_LOCATION=s3://$S3_BUCKET/${CLUSTER_NAME}-backups/schema-registry/$month
                  aws s3 cp schemas-${timestamp}.tar.gz $BACKUP_LOCATION/schemas-${timestamp}.tar.gz || exit 2
                  {{- end }}
              env:
                - name: CLUSTER_NAME
                  value: {{ .Values.backup.cluster }}
                - name: KAFKA_BOOTSTRAP_SERVERS
                  value: {{ template "schema-registry.kafka.bootstrapServers" . }}
                - name: KAFKA_TOPIC
                  value: {{ .Values.backup.topic }}
                {{- if .Values.backup.gcloud }}
                - name: BUCKET
                  value: {{ .Values.backup.gcloud.bucket }}
                - name: GOOGLE_APPLICATION_CREDENTIALS
                  value: "/accounts/key.json"
                {{- end }}
                {{- if .Values.backup.aws }}
                - name: S3_BUCKET
                  value: {{ .Values.backup.aws.bucket }}
                {{- end }}
              {{- with .Values.backup.resources }}
              resources:
                {{- toYaml . | nindent 16 }}
              {{- end }}
              {{- with .Values.backup.containerSecurityContext }}
              securityContext:
                {{- toYaml . | nindent 16 }}
              {{- end }}
              volumeMounts:
                - name: backup-location
                  mountPath: "/backup"
                {{- if .Values.backup.gcloud }}
                - name: gcs-iam-secret
                  mountPath: "/accounts"
                {{- end }}
          volumes:
            - name: backup-location
              emptyDir: {}
            {{- if .Values.backup.gcloud }}
            - name: gcs-iam-secret
              secret:
                secretName: {{ .Values.backup.gcloud.secretName }}
            {{- end }}
          enableServiceLinks: false
          {{- if .Values.backup.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml .Values.imagePullSecrets | nindent 12 }}
          {{- end }}
          {{- with .Values.backup.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.backup.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.backup.podSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.backup.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
{{- end }}
